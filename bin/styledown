#!/usr/bin/env node
const meow = require('meow')
const reduce = require('object-loops/reduce')
const fs = require('fs')
const path = require('path')
const styledown = require('../index')
const write = require('../lib/cli/write')
const renderData = require('../lib/cli/render_data')

/*
 * Help text
 */

const HELP =
`Usage:
  $ styledown FILES...

Output formats:
  -H, --html              output rendered HTML (default)
      --data              output raw data

Data output options:
      --json              display in JSON format (default)
      --yaml              display in YAML format
      --inspect           display in inspect format

HTML output options: (implies --html)
  -o, --output DIR        render output HTML to DIR

Build options:
      --skip-assets       skip JS/CSS
  -t, --transform LANG    transpiles examples of given LANG (comma-separated)

Other options:
  -h, --help              show usage information
  -v, --version           print version info and exit

Examples:

  styledown styles.md > styles.json         # parse to json
  styledown styles.md --html > styles.html  # render to html
  styledown *.md -o outdir                  # render to html (multiple)

  styledown *.md -t jade    # transpiles 'example.jade' sections`

/*
 * CLI/Minimist
 */

var cli = require('meow')(HELP, {
  boolean: ['help', 'version', 'yaml', 'json', 'html', 'skipAssets', 'inspect'],
  string: ['format', 'transform', 'output', 'layout'],
  alias: {
    h: 'help', v: 'version',
    H: 'html', t: 'transform', o: 'output', l: 'layout',
    yml: 'yaml'
  }
})

/*
 * Implied options
 */

if (cli.flags.output) cli.flags.html = true

if (typeof cli.flags.transform === 'string') {
  cli.flags.transform = cli.flags.transform.split(',')
}

cli.flags.mode = cli.flags.data ? 'data' : 'html'

/*
 * Options to send to styledown.parse() and styledown.render()
 */

var opts = {
  build: {
    transform: cli.flags.transform || null,
    skipAssets: cli.flags.skipAssets || false
  },
  render: {}
}

/*
 * Perform
 */

run()

function run () {
  const files = styledown.read(cli.input)
  var data = styledown.build(files, opts.build)

  let output
  switch (cli.flags.mode) {
    case 'html':
      const files = styledown.render(data, opts.render)
      write(files, cli.flags.output || '-', cli.flags)
      break

    case 'data':
      output = renderData(data, cli.flags)
      write(output, cli.flags.output || '-', cli.flags)
      break

    default:
      console.warn('!! not implemented')
  }
}

function getExtension (filename) {
  return filename.replace(/^.*\.([^\.]+)$/, '$1')
}
