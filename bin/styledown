#!/usr/bin/env node
const meow = require('meow')
const styledown = require('../index')
const reduce = require('object-loops/reduce')
const forEach = require('object-loops/for-each')
const read = require('read-input')
const fs = require('fs')
const path = require('path')

/*
 * CLI/Minimist
 */

var cli = require('meow')([
  'Usage:',
  '  $ styledown FILES...',
  '',
  'Output formats:',
  '  -H, --html              output rendered HTML',
  '      --data              output raw data (default)',
  '      --templates         output templates',
  '',
  'Output formats: (only for --data and --templates)',
  '      --json              parse into JSON data (default)',
  '      --yaml              parse into YAML data',
  '',
  'Parsing options:',
  '  -t, --transform LANG    transpiles examples of given LANG (comma-separated)',
  '',
  'Rendering options:',
  '  -l, --layout FILE       uses FILE as an HTML layout',
  '  -o, --output DIR        render output HTML to DIR (implies --html)',
  '',
  'Other options:',
  '  -h, --help              show usage information',
  '  -v, --version           print version info and exit',
  '',
  'Examples:',
  '',
  '  styledown styles.md > styles.json         # parse to json',
  '  styledown styles.md --html > styles.html  # render to html',
  '  styledown *.md -o outdir                  # render to html (multiple)',
  '',
  "  styledown *.md -t jade    # transpiles 'example.jade' sections"
].join('\n'), {
  boolean: ['help', 'version', 'yaml', 'json', 'html'],
  string: ['format', 'transform', 'output', 'layout'],
  alias: {
    h: 'help', v: 'version',
    H: 'html', t: 'transform', o: 'output', l: 'layout',
    yml: 'yaml'
  }
})

/*
 * Implied options
 */

if (cli.flags.output) cli.flags.html = true

if (typeof cli.flags.transform === 'string') {
  cli.flags.transform = cli.flags.transform.split(',')
}

cli.flags.mode =
  cli.flags.html ? 'html' :
  cli.flags.data ? 'data' :
  cli.flags.templates ? 'templates' :
  'data'

/*
 * Options to send to styledown.parse() and styledown.render()
 */

var opts = {
  parse: {
    transform: cli.flags.transform
  },
  render: {
    layout: cli.flags.layout && fs.readFileSync(cli.flags.layout, 'utf-8'),
    layoutEngine: cli.flags.layout && getExtension(cli.flags.layout)
  }
}

if (cli.flags.sampleLayout) {
  printSampleLayout()
  process.exit(0)
}

/*
 * Perform
 */

read(cli.input)
.then(function (res) {
  res.files.forEach(function (file) {
    if (file.error) throw file.error
  })

  var data = styledown.parse(res.files, opts.parse)

  // if (cli.flags.mode === 'html') {
  if (cli.flags.output) {
    const files = renderAll(data)
    writeFiles(files, cli.flags.output)
  } else if (cli.flags.html) {
    renderToStdout(data)
  } else if (cli.flags.yaml) {
    parseToYaml(data)
  } else {
    parseToJson(data)
  }
})

/*
 * Render many files
 */

function renderAll (data, dir) {
  return reduce(data.files, (result, file, fname) => {
    const outname = fname.replace(/\.md$/, '.html')
    result[outname] = {
      contents: styledown.render(data, fname, opts.render)
    }
    return result
  }, {})
}

/**
 * Writes files to a folder.
 *
 *     files = {
 *       'readme.html': { contents: '...' }
 *     }
 *
 *     writeFiles(files, __dirname)
 */

function writeFiles (files, dir) {
  require('mkdirp').sync(dir)

  forEach(files, (file, fname) => {
    fs.writeFileSync(path.join(dir, fname), file.contents, 'utf-8')
  })
}

/*
 * Render to stdout (--html)
 */

function renderToStdout (output) {
  Object.keys(output.files).forEach(function (fname) {
    process.stdout.write(styledown.render(output, fname, opts.render))
  })
}

/*
 * Parse to YAML (--yaml)
 */

function parseToYaml (output) {
  console.log(require('js-yaml').safeDump(output))
}

/*
 * Parse to JSON (default, --json)
 */

function parseToJson (output) {
  console.log(JSON.stringify(output, null, 2))
}

/*
 * Print sample layout
 */

function printSampleLayout () {
  if (process.stdout.isTTY) {
    console.error('\033[31m')
    console.error('  Sample Styledown layout:')
    console.error('  Please save this file as `layout.ejs`. That is:')
    console.error('')
    console.error('      styledown --sample-layout > layout.ejs')
    console.error('')
    console.error('  You can then pass it on via `styledown --layout layout.ejs`.')
    console.error('\033[0m')
  }

  process.stdout.write(fs.readFileSync(__dirname + '/../data/layout.ejs', 'utf-8'))
}

function getExtension (filename) {
  return filename.replace(/^.*\.([^\.]+)$/, '$1')
}
